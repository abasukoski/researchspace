/**
 * ResearchSpace
 * Copyright (C) 2020, Â© Trustees of the British Museum
 * Copyright (C) 2015-2019, metaphacts GmbH
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

import { isEmpty } from 'lodash';
import { loadRemote } from '@module-federation/runtime';
import { ComponentClass } from 'react';

import { getAllApps } from 'platform/api/services/apps';

/**
 * That is a special require, custom-components module will be generated by
 * webpack custom componentsLoader that uses component.json file to create
 * set of dynamic 'System.import' for web components.
 */
const components = require('platform-components');

import { registerRemotes } from '@module-federation/enhanced/runtime';


// Function to convert dash-separated strings to PascalCase
function toPascalCase(str) {
  return str.replace(/(^\w|-\w)/g, match => match.replace('-', '').toUpperCase());
}

let externalComponents = {};
export async function initPlugins(isDevelopmentMode: boolean) {
  const allApps = await getAllApps();

  const remotes =
    allApps
      .filter(app => !isEmpty(app.components))
      .map(app => {
        app.components.forEach(
          component =>
            externalComponents[component] = {'module': app.id, component: toPascalCase(component)}
        );
        const entryBase = isDevelopmentMode ? 'http://localhost:3010' : '/assets';
        const entry = `${entryBase}/${app.id}/mf-manifest.json`;
        return {
          name: app.id,
          entry,
        };
      });

  registerRemotes(remotes, { force: true });
}

/**
 * Asynchronously load JS file for React based web-component.
 */
export function loadComponent(tagName: string): Promise<ComponentClass<any>> {
  if (isInternalComponent(tagName)) {
    return components(tagName).then((component) => {
      const comp = component.default ? component.default : component;
      return comp;
    });
  } else if (isExternalComponent(tagName)) {
    const { module, component } = externalComponents[tagName];
    return loadExternalComponent(module, component);
  } else {
    console.warn('component not found for tag ' + tagName);
  }

}


async function loadExternalComponent(module: string, component: string) {
  const remote = await loadRemote(`${module}/${component}`) as any;
  return remote.default;
}


function isInternalComponent(tagName: string): boolean {
  const loader = components(tagName);
  if (loader) {
    return true;
  } else {
    return false;
  }
}

function isExternalComponent(tagName: string): boolean {
  const loader = externalComponents[tagName];
  if (loader) {
    return true;
  } else {
    return false;
  }

}

/**
 * Check if there is React component that corresponds to tagName.
 */
export function hasComponent(tagName: string): boolean {
  return isInternalComponent(tagName) || isExternalComponent(tagName);
}

export interface ComponentClassMetadata {
  __htmlTag?: string;
}
